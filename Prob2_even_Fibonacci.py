
# Problem 2: Even Fibonacci numbers
# Author: Fabio Motta, 18.06.2020
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
# first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# Fn = F(n-1) + F(n-2)

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
# even-valued terms.


# REALLY UGLY SOLUTION

def max_fib():  # find fibonacci number (iteration) whose value does not exceed 4 Mio.
    iteration_number = 0    # keep track of iteration number
    n_2 = 1
    n_1 = 2
    n_0 = 0
    while n_2 <= 4000000:
        n_0 = n_1 + n_2
        n_2 = n_1
        n_1 = n_0
        iteration_number += 1

    return iteration_number


def fib(n):     # Fibonacci sequence and sum all even-values (divisible by 2)
    old = 1  # n-2
    previous = 2  # n-1
    new = 0     # n
    even_sum = 0
    for i in range(1, n+1):  # Starts at 1!

        if old % 2 == 0:    # check if even. If so add
            even_sum += old

        # print(i, ": ", old)   # allows to show all numbers of the Fibonacci sequence
        new = old + previous    # sum to create new number
        old = previous          # update "old" variable
        previous = new          # updated "previous" var

    return even_sum    # printing new would give the next number! By having the print before the calculation of the
# new numbers the "printer" always lags of one time instance


def main():
    max_iter = max_fib()    # highest number of iterations w.out exceeding value number of 4 Mio.
    print("final sum is:", fib(max_iter), "with ", max_iter, "calls")
    return 0


if __name__ == "__main__":
    main()
